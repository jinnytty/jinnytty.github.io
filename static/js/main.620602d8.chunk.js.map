{"version":3,"sources":["../../src/BaseSource.ts","../../src/index.ts","App.js","index.js"],"names":["offset","this","requestPromise","App","CLIENTID","source","TwitchVod","clientId","vodid","bridge","ReactPlayerBridge","chatNode","React","useRef","useEffect","TwitchRenderer","create","BetterTTV","FrankerFacez","then","r","ReChat","current","setPlayer","playerRef","Fragment","id","ref","url","controls","width","height","onPlay","bind","onPause","require","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.620602d8.chunk.js","sourcesContent":["import Debug from 'debug';\nimport PCancelable from 'p-cancelable';\nconst debug = Debug('BaseSource');\nexport class BaseSource {\n    constructor() {\n        this.offset = 0;\n        // in case of reset error, stop everything until new request\n        this.resetError = false;\n        // threshold until new request\n        this.threshold = 20;\n        // time to go back\n        this.backTime = 2;\n        // max time (in seconds) messages are cached\n        this.cacheTime = 60;\n        // index of the next message to release\n        this.index = 0;\n        // stored like: 0 <-- cached ---> index <--- message to release --->\n        this.messages = [];\n        // current cancelable promise\n        this.requestPromise = null;\n        this.listeners = [];\n        this.doUpdateFn = PCancelable.fn(this.doUpdate.bind(this));\n        this.doRequestFn = PCancelable.fn(this.doRequest.bind(this));\n    }\n    request(offset) {\n        debug('request(%d)', offset);\n        this.resetError = false;\n        // check if offset is still in the boundary of the array\n        let start = offset - this.backTime;\n        if (start < 0)\n            start = 0;\n        this.offset = offset;\n        if (this.messages.length === 0 ||\n            offset < this.messages[0].offset ||\n            offset > this.messages[this.messages.length - 1].offset) {\n            debug('offset out of boundary: new request');\n            if (this.requestPromise != null) {\n                debug('cancel ongoing request');\n                this.requestPromise.cancel();\n            }\n            this.index = 0;\n            this.messages = [];\n            this.emitClear();\n            this.requestPromise = this.doRequestFn(start);\n            this.requestPromise.then(this.addMessages.bind(this)).catch((e) => {\n                if (e instanceof PCancelable.CancelError)\n                    return;\n                this.reset();\n            });\n            return this;\n        }\n        // if start is before the current index, reset the index\n        if (offset < this.messages[this.index].offset) {\n            debug('reset index');\n            this.index = 0;\n        }\n        this.release();\n        this.removeOld();\n        this.triggerUpdate();\n        return this;\n    }\n    update(offset) {\n        debug('update(%d)', offset);\n        if (this.resetError)\n            return this;\n        if (offset < this.offset) {\n            // workaround react player with youtube\n            // getting a time small than the previous one\n            // after a pause/resume\n            if (offset < this.offset - 1.5) {\n                this.index = 0;\n                this.emitClear();\n            }\n            else {\n                return this;\n            }\n        }\n        this.offset = offset;\n        this.release();\n        this.removeOld();\n        this.triggerUpdate();\n        return this;\n    }\n    reset() {\n        debug('reset()');\n        this.index = 0;\n        this.messages = [];\n        let start = this.offset - this.backTime;\n        if (start < 0)\n            start = 0;\n        this.emitClear();\n        this.requestPromise = this.doRequestFn(start);\n        this.requestPromise.then(this.addMessages.bind(this)).catch((e) => {\n            if (e instanceof PCancelable.CancelError)\n                return;\n            this.resetError = true;\n            this.emitError('unable to reset chat');\n        });\n    }\n    removeOld() {\n        debug('removeOld()');\n        let delIdx = -1;\n        const time = this.offset - this.backTime;\n        debug('time %d', time);\n        for (let i = 0; i < this.messages.length; ++i) {\n            if (this.messages[i].offset >= time) {\n                delIdx = i - 1;\n                debug('last index %d', delIdx);\n                break;\n            }\n            if (i === this.messages.length - 1) {\n                debug('delete all');\n                delIdx = i;\n            }\n        }\n        if (delIdx > -1) {\n            debug('remove message from 0 to %d', delIdx);\n            this.messages.splice(0, delIdx + 1);\n            this.index -= delIdx + 1;\n        }\n        debug('new index %d', this.index);\n    }\n    release() {\n        debug('release()');\n        // list of messages to release\n        const messages = [];\n        debug('index %d', this.index);\n        for (let i = this.index + 1; i < this.messages.length; ++i) {\n            const m = this.messages[i];\n            if (m.offset > this.offset)\n                break;\n            this.index = i;\n            messages.push(m);\n        }\n        debug('new index %d', this.index);\n        debug('emit %d', messages.length);\n        this.emitMessages(messages);\n    }\n    triggerUpdate() {\n        debug('triggerupdate()');\n        if (this.resetError)\n            return;\n        if (this.requestPromise != null) {\n            debug('requestPromise != null');\n            return;\n        }\n        if (this.messages.length > 0) {\n            const m = this.messages[this.index];\n            debug('index message offset %d <= %d', m.offset, this.threshold);\n            if (m.offset <= this.threshold)\n                return;\n        }\n        this.requestPromise = this.doUpdateFn();\n        this.requestPromise.then(this.addMessages.bind(this)).catch((e) => {\n            debug('triggerUpdate request fail %s', e.toString());\n            if (e instanceof PCancelable.CancelError)\n                return;\n            this.reset();\n        });\n    }\n    addMessages(messages) {\n        debug('addMesssage(%d)', messages.length);\n        this.requestPromise = null;\n        this.messages = this.messages.concat(messages);\n        if (messages.length > 0) {\n            const startoffset = messages[0].offset;\n            const endoffset = messages[messages.length - 1].offset;\n            debug('offset %d start %d end %d', this.offset, startoffset, endoffset);\n            // if offset is beyond endoffset -> reset\n            if (this.offset > endoffset) {\n                debug('offset > endoffset -> reset');\n                this.reset();\n                return;\n            }\n            this.threshold = startoffset + Math.round((endoffset - startoffset) / 2);\n            debug('set threshold %d', this.threshold);\n        }\n        this.release();\n        this.removeOld();\n        this.triggerUpdate();\n    }\n    addListener(listener) {\n        this.listeners.push(listener);\n        return this;\n    }\n    removeListener(listener) {\n        const idx = this.listeners.indexOf(listener);\n        if (idx > -1) {\n            this.listeners.splice(idx, 1);\n        }\n        return this;\n    }\n    emitError(error) {\n        this.listeners.forEach((l) => l.error(error));\n    }\n    emitMessages(messages) {\n        this.listeners.forEach((l) => l.message(messages));\n    }\n    emitClear() {\n        this.listeners.forEach((l) => l.clear());\n    }\n}\n//# sourceMappingURL=BaseSource.js.map","import { BaseSource } from '@rechat/common';\nimport fetch from 'node-fetch';\nimport Debug from 'debug';\nconst debug = Debug('TwitchVod');\nexport class TwitchVod extends BaseSource {\n    constructor(options) {\n        super();\n        this.cursor = '';\n        this.options = options;\n    }\n    doRequest(offset) {\n        debug('request %d', offset);\n        this.cursor = '';\n        return this.callApi(offset);\n    }\n    doUpdate() {\n        debug('update %s', this.cursor);\n        return this.callApi(null);\n    }\n    async callApi(offset) {\n        debug('callapi %d', offset);\n        let url = `https://api.twitch.tv/v5/videos/${this.options.vodid}/comments?`;\n        if (offset != null) {\n            url = url + 'content_offset_seconds=' + offset;\n        }\n        else {\n            debug('use cursor');\n            url = url + `cursor=${this.cursor}`;\n        }\n        const data = await this.fetch(url);\n        if (!data)\n            return [];\n        this.cursor = data._next;\n        const messages = data.comments.map((d) => {\n            return {\n                offset: d.content_offset_seconds,\n                data: d,\n            };\n        });\n        return messages;\n    }\n    async fetch(url) {\n        debug('fetch %s', url);\n        for (let i = 0; i < 3; ++i) {\n            try {\n                const resp = await fetch(url, {\n                    headers: {\n                        Accept: 'application/vnd.twitchtv.v5+json',\n                        'Client-ID': this.options.clientId,\n                    },\n                });\n                if (resp.status != 200) {\n                    throw new Error('invalid status code');\n                }\n                const data = await resp.json();\n                return data;\n            }\n            catch (e) {\n                console.error('unable to get comments ' + e.toString());\n            }\n        }\n        this.emitError('unable to get messages');\n        throw new Error('unable to get comments');\n    }\n}\nexport default TwitchVod;\n//# sourceMappingURL=index.js.map","import React, { useEffect } from 'react';\nimport ReactPlayer from 'react-player';\nimport { ReChat } from '@rechat/component';\nimport { TwitchRenderer } from '@rechat/twitch-render';\nimport { TwitchVod } from '@rechat/twitch-vod';\nimport { ReactPlayerBridge } from '@rechat/react-player-bridge';\nimport { BetterTTV } from '@rechat/betterttv';\nimport { FrankerFacez } from '@rechat/frankerfacez';\n\nimport './App.css';\n/*\n\n\n*/\n\nfunction App() {\n  const CLIENTID = 'n0dkyk9hwq7lzc7knflzssp6v9fsbv';\n  const source = new TwitchVod({\n    clientId: CLIENTID,\n    vodid: '1155849029',\n  });\n  const bridge = new ReactPlayerBridge(source);\n\n  const chatNode = React.useRef();\n  useEffect(() => {\n    TwitchRenderer.create(\n      'jinnytty',\n      CLIENTID,\n      BetterTTV.create,\n      FrankerFacez.create\n    ).then((r) => {\n      new ReChat(chatNode.current, source, r);\n    });\n    bridge.setPlayer(playerRef.current);\n  });\n\n  const playerRef = React.useRef();\n\n  return (\n    <React.Fragment>\n      <div id=\"player\">\n        <ReactPlayer\n          ref={playerRef}\n          url=\"https://api.pogu.live/https://d2nvs31859zcd8.cloudfront.net/4475570031b5be958ef9_jinnytty_39998838683_1632302793/chunked/index-dvr.m3u8\"\n          controls=\"true\"\n          width=\"100%\"\n          height=\"100%\"\n          onPlay={bridge.onPlay.bind(bridge)}\n          onPause={bridge.onPause.bind(bridge)}\n        />\n      </div>\n      <div id=\"chat\" ref={chatNode}></div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nrequire('./index.css');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}